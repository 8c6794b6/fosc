#!/bin/sh
#|-*- mode: lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ros:ensure-asdf)
(ql:quickload '(:fast-io :usocket :bordeaux-threads) :silent t)

(defpackage :cov
  (:use :cl))

(in-package :cov)

#+sbcl
(require :sb-cover)

(defun call-with-coverage (thunk)
  #+sbcl
  (with-compilation-unit
      (:policy '(optimize (sb-cover:store-coverage-data 3)))
    (funcall thunk)
    (sb-cover:report "/tmp/coverage-sbcl-fosc/"))
  #+ccl
  (progn
    (setq ccl:*compile-code-coverage* t)
    (funcall thunk)
    (ccl:report-coverage "/tmp/coverage-ccl-fosc/index.html")
    (setq ccl:*compile-code-coverage* nil)))

(defmacro with-coverage (&body body)
  `(call-with-coverage (lambda () ,@body)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((force-not '(:fast-io :fiveam
                     :trivial-backtrace
                     :net.didierverna.asdf-flv)))
    (unwind-protect
         (with-coverage
           (push :coverage *features*)
           (asdf:load-system :fosc
                             :force '(:fosc/src/condition
                                      :fosc/src/timetag
                                      :fosc/src/encdec
                                      :fosc/src/network)
                             :force-not force-not)
           (asdf:test-system :fosc))
      (in-package :cl-user)
      (setf *features* (remove :coverage *features*))
      (mapc #'delete-package '(:fosc-test
                               :fosc/src/main
                               :fosc/src/network
                               :fosc/src/encdec
                               :fosc/src/timetag))
      (asdf:load-system :fosc
                        :force '(:fosc/src/condition
                                 :fosc/src/timetag
                                 :fosc/src/encdec
                                 :fosc/src/network)
                        :force-not force-not))))
